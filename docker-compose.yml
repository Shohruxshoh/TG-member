services:
  web:
    build: .
    working_dir: /app
    command: >
      gunicorn core.asgi:application
      -k uvicorn.workers.UvicornWorker
      --bind 0.0.0.0:8080
      --workers 5
      --threads 2
      --timeout 120
      --log-level info
    volumes:
      - .:/app
      - ./tg_session:/app/tg_session
    expose:
      - "8080"
    depends_on:
      - db
      - redis

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static:/app/static
      - ./media:/app/media
    depends_on:
      - web

  db:
    image: postgres:15
    command: postgres -c max_connections=300
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST: ${DB_HOST}
    ports:
      - "5432:5432"
    env_file:
      - .env

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  celery:
    build: .
    working_dir: /app
    command: celery -A core worker -l info
    volumes:
      - .:/app
      - ./tg_session:/app/tg_session
    depends_on:
      - redis
      - db
      - web

  celery-beat:
    build: .
    working_dir: /app
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
      - ./tg_session:/app/tg_session
    depends_on:
      - redis
      - db
      - web

  flower:
    build: .
    working_dir: /app
    command: celery -A core flower --port=5555 --broker=redis://redis:6379/0
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - web
    ports:
      - "5555:5555"

volumes:
  postgres_data:
  redis_data:


#services:
#  web:
#    build: .
#    command: gunicorn core.asgi:application -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8080 --workers 4 --threads 2 --timeout 120 --log-level info
#    volumes:
#      - .:/app
#    expose:
#      - "8080"
#    ports:
#      - "8080:8080"
#    depends_on:
#      - db_master
#      - redis
#
#  nginx:
#    image: nginx:alpine
#    ports:
#      - "80:80"
#    volumes:
#      - ./nginx.conf:/etc/nginx/conf.d/default.conf
#      - ./static:/app/static
#      - ./media:/app/media
#    depends_on:
#      - web
#
#  db_master:
#    image: postgres:15
#    container_name: postgres-master
#    command: postgres -c wal_level=replica -c max_wal_senders=10 -c wal_keep_size=64 -c max_connections=300 -c hba_file=/var/lib/postgresql/data/pg_hba.conf
#    environment:
#      POSTGRES_DB: ${DB_NAME}
#      POSTGRES_USER: ${DB_USER}
#      POSTGRES_PASSWORD: ${DB_PASSWORD}
#    ports:
#      - "5432:5432"
#    volumes:
#      - postgres_master_data:/var/lib/postgresql/data
##      - ./master/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
#
#  db_replica:
#    image: postgres:15
#    container_name: postgres-replica
#    depends_on:
#      - db_master
#    ports:
#      - "5433:5432"
#    environment:
#      POSTGRES_USER: ${DB_USER}
#      POSTGRES_PASSWORD: ${DB_PASSWORD}
#    volumes:
#      - postgres_replica_data:/var/lib/postgresql/data
#      - ./replica/standby.sh:/docker-entrypoint-initdb.d/standby.sh
#      - ./replica/postgresql.conf:/etc/postgresql/postgresql.conf
#    command: postgres -c config_file=/etc/postgresql/postgresql.conf
#
#  redis:
#    image: redis:7
#    ports:
#      - "6379:6379"
#    volumes:
#      - redis_data:/data
#
#volumes:
#  postgres_master_data:
#  postgres_replica_data:
#  redis_data:
